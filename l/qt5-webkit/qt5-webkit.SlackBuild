#!/bin/bash

CWD=$(pwd)

NAME="qt5-webkit"
VERSION=${VERSION:-$(echo ${NAME//5-/}-*.tar.?z* | cut -d - -f2- | rev | cut -d . -f3- | rev)}
BUILD=${BUILD:-1}
PACKAGER=${PACKAGER:-mara}

NUMJOBS=${NUMJOBS:-" -j$(grep -c ^processor /proc/cpuinfo 2>/dev/null) "}


# Automatically determine the architecture we're building on:
MARCH=$( uname -m )
if [ -z "$ARCH" ]; then
  case "$MARCH" in
    i?86)    export ARCH=i586 ;;
    armv7hl) export ARCH=$MARCH ;;
    arm*)    export ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *)       export ARCH=$MARCH ;;
  esac
fi

if [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
  SLKLDFLAGS=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
  SLKLDFLAGS="-L/usr/lib64"
elif [ "$ARCH" = "armv7hl" ]; then
  SLKCFLAGS="-O2 -march=armv7-a -mfpu=vfpv3-d16"
  LIBDIRSUFFIX=""
  SLKLDFLAGS=""
elif [ "$ARCH" = "arm" ]; then
  SLKCFLAGS="-O2 -march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard"
  LIBDIRSUFFIX=""
  SLKLDFLAGS=""
elif [ "$ARCH" = "aarch64" ]; then
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX="64"
  SLKLDFLAGS="-L/usr/lib64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
  SLKLDFLAGS=""
fi

case "$ARCH" in
    arm*) TARGET=$ARCH-slackware-linux-gnueabihf ;;
    *)    TARGET=$ARCH-slackware-linux ;;
esac

# Establishment tmp directory for
TMP=${TMP:-/tmp}
PKG=$TMP/package-$NAME
rm -rf $PKG
mkdir -p $PKG

# Delete a directory previous build / create new and change rights
cd $TMP
rm -rf qtwebkit-$VERSION
tar xvf $CWD/qtwebkit-$VERSION.tar.?z* || exit 1
cd qtwebkit-$VERSION || exit 1
chown -R root:root .
find . \
 \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
 -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
 -exec chmod 644 {} \;

# Fix compilation against icu4c 65.1:
xzcat $CWD/qt5-webkit.icu65.patch.xz | patch -p0 --verbose || exit 1

if [[ $ARCH == "arm" || $ARCH == "armv6h" ]]; then
    xzcat $CWD/atomic.patch.xz | patch -p0 --verbose || exit 1
    CONFIG="-DENABLE_JIT=OFF"
fi
 
export CFLAGS="$SLKCFLAGS"
export CXXFLAGS="$SLKCFLAGS -fpermissive -fno-strict-aliasing"
export OPENSOURCE_CXXFLAGS="$SLKCFLAGS -fpermissive -fno-strict-aliasing"
export QTDIR="/usr/lib$LIBDIRSUFFIX/qt5"
export LD_LIBRARY_PATH="${QTDIR}/qtbase/lib:${QTDIR}/qttools/lib:${LD_LIBRARY_PATH}"

# Configuration
mkdir build
cd build
  cmake .. \
    -DCMAKE_CXX_FLAGS="${CXXFLAGS} -DNDEBUG" \
    -DPORT=Qt \
    -DQt5_DIR=$QTDIR \
    -DENABLE_TOOLS=OFF \
    $CONFIG \
  || exit 1
  # Compilation
  make ${NUMJOBS} || make || exit 1
  make install DESTDIR=$PKG || exit 1
cd ..

# Don't ship .la files:
rm -f $PKG/{,usr/}lib${LIBDIRSUFFIX}/*.la

# Strip binaries:
find $PKG | xargs file | grep -e "executable" -e "shared object" \
  | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Fix the path in prl files:
find "$PKG/usr/lib${LIBDIRSUFFIX}" -type f -name '*.prl' \
  -exec sed -i -e '/^QMAKE_PRL_BUILD_DIR/d;s/\(QMAKE_PRL_LIBS =\).*/\1/' {} \;

# Compress manual pages:
find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do
  ln -s $( readlink $i ).gz $i.gz
  rm $i
done

# Copy docs
mkdir -vpm755 $PKG/usr/doc/$NAME-$VERSION
cp -fav \
  ChangeLog* VERSION \
  $PKG/usr/doc/$NAME-$VERSION/
if [ -d $PKG/usr/lib${LIBDIRSUFFIX}/qt5/doc/html ]; then
  ( cd $PKG/usr/doc/$NAME-$VERSION
    ln -sf /usr/lib${LIBDIRSUFFIX}/qt5/doc/html .
  )
fi
cat $CWD/$NAME.SlackBuild > $PKG/usr/doc/$NAME-$VERSION/$NAME.SlackBuild

# Description and installation script
mkdir -p $PKG/install
zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh
cat $CWD/slack-desc > $PKG/install/slack-desc

# Package creation
cd $PKG
makepkg -l n -c n $TMP/${NAME}-${VERSION//-/_}-${ARCH}-${BUILD}${PACKAGER}.txz
