#!/bin/bash

CWD=$(pwd)

NAME="qemu"
_NAME="${NAME}-user-static"
VERSION=${VERSION:-$(echo $NAME-*.tar.?z* | cut -d - -f2 | rev | cut -d . -f3- | rev)}
BUILD=${BUILD:-1}
PACKAGER=${PACKAGER:-mara}

NUMJOBS=${NUMJOBS:-" -j$(grep -c ^processor /proc/cpuinfo 2>/dev/null) "}

KVMGROUP=${KVMGROUP:-users}

# Automatically determine the architecture we're building on:
MARCH=$( uname -m )
if [ -z "$ARCH" ]; then
  case "$MARCH" in
    i?86)    export ARCH=i586 ;;
    armv7hl) export ARCH=$MARCH ;;
    arm*)    export ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *)       export ARCH=$MARCH ;;
  esac
fi

if [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
elif [ "$ARCH" = "armv7hl" ]; then
  SLKCFLAGS="-O2 -march=armv7-a -mfpu=vfpv3-d16"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "arm" ]; then
  SLKCFLAGS="-O2 -march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "aarch64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
elif [ "$ARCH" = "riscv64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

case "$ARCH" in
    arm*) TARGET=$ARCH-slackware-linux-gnueabihf ;;
    *)    TARGET=$ARCH-slackware-linux ;;
esac

# Establishment tmp directory for
TMP=${TMP:-/tmp}
PKG=$TMP/package-${_NAME}
rm -rf $PKG
mkdir -p $PKG

# Delete a directory previous build / create new and change rights
cd $TMP
rm -rf $NAME-$VERSION
tar xvf $CWD/$NAME-$VERSION.tar.?z* || exit 1
cd $NAME-$VERSION || exit 1
chown -R root:root .
#find . \
# \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
# -exec chmod 755 {} \; -o \
# \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
# -exec chmod 644 {} \;

# fix for glibc 2.36
patch -Np1 --verbose -i $CWD/qemu-7.0.0-glibc-2.36.patch || exit 1

mkdir -p build
cd build
# Configuration
CFLAGS="$SLKCFLAGS -g1" \
CXXFLAGS="$SLKCFLAGS -g1" \
../configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --mandir=/usr/man \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --libexecdir=/usr/libexec/qemu \
  --docdir=/usr/doc/${_NAME}-$VERSION \
  --enable-linux-user \
  --disable-debug-info \
  --disable-bsd-user \
  --disable-werror \
  --disable-system \
  --disable-tools \
  --disable-docs \
  --disable-gtk \
  --disable-gnutls \
  --disable-nettle \
  --disable-gcrypt \
  --disable-glusterfs \
  --disable-libnfs \
  --disable-libiscsi \
  --disable-vnc \
  --disable-kvm \
  --disable-libssh \
  --disable-vde \
  --disable-sdl \
  --disable-opengl \
  --disable-xen \
  --disable-fdt \
  --disable-vhost-net \
  --disable-vhost-crypto \
  --disable-vhost-user \
  --disable-vhost-vsock \
  --disable-vhost-scsi \
  --disable-tpm \
  --disable-qom-cast-debug \
  --disable-capstone \
  --disable-zstd \
  --disable-linux-io-uring \
  --static

# Compilation
make ARFLAGS="rc" || exit 1
make install DESTDIR=$PKG

# Don't ship .la files:
rm -f $PKG/{,usr/}lib${LIBDIRSUFFIX}/*.la

# remove conflicting /var/run directory
rm -rf $PKG/var

# Remove BIOS files etc...
rm -rf $PKG/usr/share
# Rename static qemu binaries
cd $PKG/usr/bin/
ls -1 | while read f; do
    mv "$f" "$f-static"
done

# Strip binaries:
find $PKG | xargs file | grep -e "executable" -e "shared object" \
  | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Compress manual pages:
find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do
  ln -s $( readlink $i ).gz $i.gz
  rm $i
done

# Copy docs
mkdir -vpm755 $PKG/usr/doc/${_NAME}-$VERSION
cp -fav \
  LICENSE README \
  $PKG/usr/doc/${_NAME}-$VERSION/
cat $CWD/${_NAME}.SlackBuild > $PKG/usr/doc/${_NAME}-$VERSION/${_NAME}.SlackBuild

# Description and installation script
mkdir -p $PKG/install
zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh
cat $CWD/slack-desc > $PKG/install/slack-desc

# Package creation
cd $PKG
makepkg -l n -c n $TMP/${_NAME}-${VERSION}-${ARCH}-${BUILD}${PACKAGER}.txz
