--- a/mozilla-firefox.SlackBuild	2020-06-30 17:19:03.583086326 +0000
+++ b/mozilla-firefox.SlackBuild	2020-06-30 17:18:10.414258980 +0000
@@ -42,6 +42,9 @@
 # "UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 36: ordinal not in range(128)"
 LANG=C
 
+# LTO needs more open files
+ulimit -n 4096
+
 # Add a shell script to start the firefox binary with MOZ_ALLOW_DOWNGRADE=1
 # to avoid backing up (and disabling) the user profile if a browser downgrade
 # is detected. We made it fine for years without this feature, and all the
@@ -89,7 +92,7 @@
 export CXX=${CXX:-g++}
 
 # Keep memory usage as low as possible when linking:
-SLKLDFLAGS=" -Wl,--as-needed -Wl,--no-keep-memory -Wl,--stats"
+SLKLDFLAGS=" -Wl,--as-needed -Wl,--reduce-memory-overheads -Wl,--no-keep-memory -Wl,--stats"
 export LDFLAGS="$SLKLDFLAGS"
 export MOZ_LINK_FLAGS="$SLKLDFLAGS"
 
@@ -142,6 +145,9 @@
 elif [ "$ARCH" = "armel" ]; then
   SLKCFLAGS="-O2 -march=armv4t"
   LIBDIRSUFFIX=""
+elif [ "$ARCH" = "aarch64" ]; then
+  SLKCFLAGS="-O2"
+  LIBDIRSUFFIX="64"
 else
   SLKCFLAGS="-O2"
   LIBDIRSUFFIX=""
@@ -218,8 +224,18 @@
   \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
   -exec chmod 644 {} \+
 
+xzcat $CWD/Bug-1238661---fix-mozillaSignalTrampoline-to-work-.patch.xz | patch -p1 --verbose || exit 1
+xzcat $CWD/arm.patch.xz | patch -p1 --verbose || exit 1
+xzcat $CWD/build-arm-libopus.patch.xz | patch -p1 --verbose || exit 1
+
 # Our building options, in a configure-like display ;)
 OPTIONS="\
+  --host=$ARCH-slackware-linux \
+  --target=$ARCH-slackware-linux \
+  --disable-av1 \
+  --disable-jemalloc \
+  --disable-webrtc \
+  \
   --enable-official-branding \
   --prefix=/usr \
   --libdir=/usr/lib${LIBDIRSUFFIX} \
@@ -227,8 +243,6 @@
   --enable-alsa \
   --enable-application=browser \
   --enable-default-toolkit=cairo-gtk3 \
-  --enable-linker=gold \
-  --enable-startup-notification \
   $GOOGLE_API_KEY \
   --enable-strip \
   --enable-cpp-rtti \
@@ -292,9 +306,19 @@
   echo "ac_add_options --target=i686-pc-linux-gnu" >> .mozconfig
 fi
 
+if [[ $ARCH == "aarch64" ]]; then
+    echo 'ac_add_options --enable-rust-simd' >> .mozconfig
+fi
+
 # Add the $OPTIONS above to .mozconfig:
 for option in $OPTIONS; do echo "ac_add_options $option" >> .mozconfig; done
 
+# ARM: see https://bugzilla.redhat.com/show_bug.cgi?id=1426850
+# This isn't added using $SLKCONFARGS because it doesn't cater for things with spaces in:
+# unless I edit the for loop above to use IFS with some other variable.
+# this is easier right now ;-)
+echo 'ac_add_options --enable-optimize="-O1 -fno-schedule-insns"' >> .mozconfig
+
 # https://developer.mozilla.org/en-US/docs/Building_with_Profile-Guided_Optimization
 # Thanks to ArchLinux and Gentoo for the additional hints.
 if [ "$PGO" = "yes" ]; then
