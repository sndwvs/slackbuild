#!/bin/bash

# Slackware build script for Pale Moon

# Copyright 2018,2019 Vasily Sora USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# xxxx.xx.xx    Modified by SlackBuilds.org
# 2020.09.22    Adapted by mara for slarm64



CWD=$(pwd)

NAME="palemoon"
VERSION=${VERSION:-$(ls Pale-Moon-*.tar.?z* | cut -d - -f3 | rev | cut -d . -f3- | cut -d _ -f2-| rev)}
VERSION_UXP=${VERSION_UXP:-$(ls UXP-*.tar.?z* | cut -d - -f2 | rev | cut -d . -f3- | cut -d _ -f1 | rev)}
SRC1=${SRC1:-Pale-Moon-${VERSION}_Release}
SRC2=${SRC2:-UXP-RELBASE_${VERSION_UXP}}
BUILD=${BUILD:-1}
PACKAGER=${PACKAGER:-mara}

NUMJOBS=${NUMJOBS:-" -j$(grep -c ^processor /proc/cpuinfo 2>/dev/null) "}


# Automatically determine the architecture we're building on:
MARCH=$( uname -m )
if [ -z "$ARCH" ]; then
  case "$MARCH" in
    i?86)    export ARCH=i586 ;;
    armv7hl) export ARCH=$MARCH ;;
    arm*)    export ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *)       export ARCH=$MARCH ;;
  esac
fi

OBJ=${OBJ:-obj-$NAME}
GTK=${GTK:-gtk2}

# You can try changing the optimization level to simply "-O2" if your processor
# doesn't support sse2 instructions.
# "-Os" might help if you experience segfaults.
if [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
  OPTIMIZE=${OPTIMIZE:-"-O2 -msse2 -mfpmath=sse"}
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
  OPTIMIZE=${OPTIMIZE:-"-O2 -msse2 -mfpmath=sse"}
elif [ "$ARCH" = "arm" ]; then
  SLKCFLAGS="-O2 -march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard"
  LIBDIRSUFFIX=""
  OPTIMIZE=${OPTIMIZE:-"-O2"}
elif [ "$ARCH" = "aarch64" ]; then
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX="64"
  OPTIMIZE=${OPTIMIZE:-"-O2"}
else
  SLKCFLAGS=""
  LIBDIRSUFFIX=""
  OPTIMIZE=${OPTIMIZE:-"-O2"}
fi

case "$ARCH" in
    arm*) TARGET=$ARCH-slackware-linux-gnueabihf ;;
    *)    TARGET=$ARCH-slackware-linux ;;
esac

# Establishment tmp directory for
TMP=${TMP:-/tmp}
PKG=$TMP/package-$NAME
rm -rf $PKG $TMP/$OBJ
mkdir -p $PKG $TMP/$OBJ


# build requires old autoconf-2.13
cd $TMP
rm -rf autoconf-2.13
tar xvf $CWD/autoconf-2.13.tar.xz || exit 1
cd autoconf-2.13
zcat $CWD/autoconf-2.13-consolidated_fixes-1.patch.gz | patch -p1 --verbose
chown -R root:root .
find . \
 \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
 -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
 -exec chmod 644 {} \;

# Build a temporary copy of autoconf-2.13 only to be used to compile
# Pale Moon, since it somewhat inexplicably requires this ancient version:
rm -rf $TMP/autoconf-tmp || exit 1
mkdir -p $TMP/autoconf-tmp
# This will be at the beginning of the $PATH, so protect against nonsense
# happening in $TMP:
chmod 700 $TMP/autoconf-tmp
rm -rf $TMP/autoconf-tmp || exit 1
mkdir -p $TMP/autoconf-tmp/usr

./configure \
  --prefix=$TMP/autoconf-tmp/usr \
  --program-suffix=-2.13 \
  --infodir=$TMP/autoconf-tmp/usr/info \
  --mandir=$TMP/autoconf-tmp/usr/man \
  --build=$TARGET || exit 1

make $NUMJOBS || make || exit 1
make install || exit 1
PATH=$TMP/autoconf-tmp/usr/bin:$PATH

# build Pale Moon

# Delete a directory previous build / create new and change rights
cd $TMP
rm -rf $SRC1 || exit 1
tar -xvf $CWD/$SRC1.tar.?z* || exit 1
[[ ! -d $SRC1 ]] && ln -sf pale-moon $SRC1
cd $SRC1 || exit 1
tar -xvf $CWD/$SRC2.tar.?z* -C platform --strip-components 1 || exit 1
chown -R root:root .
find . \
 \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
 -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
 -exec chmod 644 {} \;

# Selectively APPLY patch for glibc 2.30+
cat $CWD/glibc-2.30+.patch || patch -p0 || exit 1

# Without LANG=C, building the Python environment may fail with:
# "UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 36: ordinal not in range(128)"
export LANG=C

# Keep memory usage as low as possible when linking:
SLKLDFLAGS=" -Wl,--as-needed -Wl,--reduce-memory-overheads -Wl,--no-keep-memory -Wl,--stats"
export LDFLAGS="$SLKLDFLAGS"
export MOZ_LINK_FLAGS="$SLKLDFLAGS"

export MOZCONFIG="$TMP/$SRC1/.mozconfig"
export MOZILLA_OFFICIAL=1
export MOZ_MAKE_FLAGS=$MAKEFLAGS
export CFLAGS="$SLKCFLAGS"
export CXXFLAGS="$SLKCFLAGS"
export BUILDING_RELEASE=1
export MOZ_ADDON_SIGNING=
export MOZ_REQUIRE_SIGNING=
export MOZ_TELEMETRY_REPORTING=
export PYTHON=/usr/bin/python2

# Please see https://www.palemoon.org/redist.shtml for restrictions when using the official branding.
# Our building options, in a configure-like display ;)
OPTIONS="\
  --enable-official-branding \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --with-default-mozilla-five-home=/usr/lib${LIBDIRSUFFIX}/$NAME-$VERSION \
  --x-libraries=/usr/lib${LIBDIRSUFFIX} \
  --enable-default-toolkit=cairo-$GTK \
  --disable-accessibility \
  --enable-devtools \
  --enable-alsa \
  --enable-application=$NAME \
  --disable-crashreporter \
  --disable-updater \
  --disable-tests \
  --enable-jemalloc \
  --with-pthreads \
  --enable-strip \
  --disable-debug \
  --disable-debug-symbols \
  --enable-release \
  --host=$TARGET \
  --target=$TARGET"

echo "mk_add_options MOZ_OBJDIR=$TMP/$OBJ" > .mozconfig

# Set options for $OPTIMIZE:
echo "ac_add_options --enable-optimize=\"$OPTIMIZE -fno-schedule-insns\"" >> .mozconfig

# Add the$OPTIONS above to .mozconfig:
for option in $OPTIONS; do echo "ac_add_options $option" >> .mozconfig; done

if ! pkg-config --exists libpulse; then
echo "ac_add_options --disable-pulseaudio" >> .mozconfig; fi

if pkg-config --exists jack && [ "${BLACKLIST_JACK:-no}" != "yes" ]; then
echo "ac_add_options --enable-jack" >> .mozconfig; fi

sed -i 's/.\/platform\/mach/"python2\ .\/platform\/mach"/g' mach
./mach build || exit 1

## Clean up; and package Pale Moon.
mkdir -p $PKG/usr/lib${LIBDIRSUFFIX}/mozilla/plugins
cd $TMP/$OBJ
make install DESTDIR=$PKG || exit 1

cd $PKG

# We don't need these (just symlinks anyway):
rm -rf usr/lib${LIBDIRSUFFIX}/$NAME-devel-$VERSION

# Avoid duplicate binaries; details: https://bugzilla.mozilla.org/show_bug.cgi?id=658850
# Pale Moon package scripts appear to attempt this, on other 'distros'; those scripts,
# however, appear to fail on Slackware.
rm -f usr/lib${LIBDIRSUFFIX}/$NAME-$VERSION/$NAME-bin

# Use system provided Hunspell, if desired.
if [ "${USE_SYSTEM_HUNSPELL}" = "yes" ]; then
  rm -rfv usr/lib${LIBDIRSUFFIX}/$NAME-$VERSION/dictionaries
  cp -vsr /usr/share/hunspell usr/lib${LIBDIRSUFFIX}/$NAME-$VERSION/dictionaries
fi

# Install icons:
for PX in 16 32 48 ; do
  mkdir -p $PKG/usr/share/icons/hicolor/${PX}x${PX}/apps
  ln -s /usr/lib${LIBDIRSUFFIX}/$NAME-$VERSION/browser/chrome/icons/default/default${PX}.png \
        $PKG/usr/share/icons/hicolor/${PX}x${PX}/apps/$NAME.png
done
# ... and the 128px icon file too:
mkdir -p $PKG/usr/share/icons/hicolor/128x128/apps
ln -s /usr/lib${LIBDIRSUFFIX}/$NAME-$VERSION/browser/icons/mozicon128.png \
      $PKG/usr/share/icons/hicolor/128x128/apps/$NAME.png

mkdir -p $PKG/usr/share/applications
cat $CWD/palemoon.desktop > $PKG/usr/share/applications/$NAME.desktop

# Compress manual pages:
find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do
  ln -s $( readlink $i ).gz $i.gz
  rm $i
done

# Copy docs
mkdir -vpm755 $PKG/usr/doc/$NAME-$VERSION
cp -fav \
  $TMP/$SRC1/platform/LEGAL $TMP/$SRC1/LICENSE $TMP/$SRC1/README.md $TMP/$SRC1/AUTHORS \
  $PKG/usr/doc/$NAME-$VERSION/
cat $CWD/$NAME.SlackBuild > $PKG/usr/doc/$NAME-$VERSION/$NAME.SlackBuild

# Description and installation script
mkdir -p $PKG/install
zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh
cat $CWD/slack-desc > $PKG/install/slack-desc

# Package creation
cd $PKG
makepkg -l n -c n $TMP/${NAME}-${VERSION}-${ARCH}-${BUILD}${PACKAGER}.txz
