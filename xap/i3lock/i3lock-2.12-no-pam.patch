diff -Naur LICENSE-slock LICENSE-slock
--- LICENSE-slock	1970-01-01 03:00:00.000000000 +0300
+++ LICENSE-slock	2020-02-02 04:42:04.337775511 +0200
@@ -0,0 +1,24 @@
+MIT/X Consortium License
+
+© 2015-2016 Markus Teich <markus.teich@stusta.mhn.de>
+© 2014 Dimitris Papastamos <sin@2f30.org>
+© 2006-2014 Anselm R Garbe <anselm@garbe.us>
+© 2014-2016 Laslo Hunhold <dev@frign.de>
+
+Permission is hereby granted, free of charge, to any person obtaining a
+copy of this software and associated documentation files (the "Software"),
+to deal in the Software without restriction, including without limitation
+the rights to use, copy, modify, merge, publish, distribute, sublicense,
+and/or sell copies of the Software, and to permit persons to whom the
+Software is furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+DEALINGS IN THE SOFTWARE.
diff -Naur i3lock.1 i3lock.1
--- i3lock.1	2019-07-21 12:14:54.000000000 +0300
+++ i3lock.1	2020-02-02 04:42:05.841775275 +0200
@@ -43,8 +43,6 @@
 You can specify either a background color or a PNG image which will be displayed while your screen is locked.
 .IP \[bu]
 You can specify whether i3lock should bell upon a wrong password.
-.IP \[bu]
-i3lock uses PAM and therefore is compatible with LDAP, etc.
 
 
 .SH OPTIONS
@@ -66,8 +64,7 @@
 .B \-u, \-\-no-unlock-indicator
 Disable the unlock indicator. i3lock will by default show an unlock indicator
 after pressing keys. This will give feedback for every keypress and it will
-show you the current PAM state (whether your password is currently being
-verified or whether it is wrong).
+show you whether your password is currently being verified or whether it is wrong.
 
 .TP
 .BI \-i\  path \fR,\ \fB\-\-image= path
@@ -122,7 +119,7 @@
 .TP
 .B \-e, \-\-ignore-empty-password
 When an empty password is provided by the user, do not validate
-it. Without this option, the empty password will be provided to PAM
+it. Without this option, the empty password will be validated
 and, if invalid, the user will have to wait a few seconds before
 another try. This can be useful if the XF86ScreenSaver key is used to
 put a laptop to sleep and bounce on resume or if you happen to wake up
diff -Naur i3lock.c i3lock.c
--- i3lock.c	2019-07-21 11:26:39.000000000 +0300
+++ i3lock.c	2020-02-02 04:46:51.861647150 +0200
@@ -24,7 +24,9 @@
 #ifdef __OpenBSD__
 #include <bsd_auth.h>
 #else
-#include <security/pam_appl.h>
+#include <shadow.h>
+#include <grp.h>
+#include <errno.h>
 #endif
 #include <getopt.h>
 #include <string.h>
@@ -63,7 +65,7 @@
 xcb_window_t win;
 static xcb_cursor_t cursor;
 #ifndef __OpenBSD__
-static pam_handle_t *pam_handle;
+const char *hash = NULL;
 #endif
 int input_position = 0;
 /* Holds the password you enter (in UTF-8). */
@@ -97,6 +99,37 @@
 bool ignore_empty_password = false;
 bool skip_repeated_empty_password = false;
 
+/*
+ * Shamelessly stolen from slock. See LICENSE-slock.
+ * This adjusts the process' out of memory score,
+ *  so it isn't killed by the kernel under any circumstances.
+ */
+#ifdef __linux__
+#include <fcntl.h>
+#include <linux/oom.h>
+
+static void
+dontkillme(void)
+{
+    FILE *f;
+    const char oomfile[] = "/proc/self/oom_score_adj";
+
+    if (!(f = fopen(oomfile, "w"))) {
+        if (errno == ENOENT)
+            return;
+        errx(EXIT_FAILURE, "fopen %s: %s", oomfile, strerror(errno));
+    }
+    fprintf(f, "%d", OOM_SCORE_ADJ_MIN);
+    if (fclose(f)) {
+        if (errno == EACCES)
+            errx(EXIT_FAILURE, "unable to disable OOM killer. "
+                               "Make sure to suid or sgid i3lock.");
+        else
+            errx(EXIT_FAILURE, "fclose %s: %s", oomfile, strerror(errno));
+    }
+}
+#endif
+
 /* isutf, u8_dec © 2005 Jeff Bezanson, public domain */
 #define isutf(c) (((c)&0xC0) != 0x80)
 
@@ -289,16 +322,16 @@
         return;
     }
 #else
-    if (pam_authenticate(pam_handle, 0) == PAM_SUCCESS) {
-        DEBUG("successfully authenticated\n");
-        clear_password_memory();
+    /*
+     * Shamelessly stolen from slock. See LICENSE-slock.
+     */
+    char *inputhash;
 
-        /* PAM credentials should be refreshed, this will for example update any kerberos tickets.
-         * Related to credentials pam_end() needs to be called to cleanup any temporary
-         * credentials like kerberos /tmp/krb5cc_pam_* files which may of been left behind if the
-         * refresh of the credentials failed. */
-        pam_setcred(pam_handle, PAM_REFRESH_CRED);
-        pam_end(pam_handle, PAM_SUCCESS);
+    if (!(inputhash = crypt(password, hash)))
+        fprintf(stderr, "crypt: %s", strerror(errno));
+    else if (!strcmp(inputhash, hash)) {
+        DEBUG("successfully authenticated");
+        clear_password_memory();
 
         ev_break(EV_DEFAULT, EVBREAK_ALL);
         return;
@@ -816,39 +849,6 @@
     return true;
 }
 
-#ifndef __OpenBSD__
-/*
- * Callback function for PAM. We only react on password request callbacks.
- *
- */
-static int conv_callback(int num_msg, const struct pam_message **msg,
-                         struct pam_response **resp, void *appdata_ptr) {
-    if (num_msg == 0)
-        return 1;
-
-    /* PAM expects an array of responses, one for each message */
-    if ((*resp = calloc(num_msg, sizeof(struct pam_response))) == NULL) {
-        perror("calloc");
-        return 1;
-    }
-
-    for (int c = 0; c < num_msg; c++) {
-        if (msg[c]->msg_style != PAM_PROMPT_ECHO_OFF &&
-            msg[c]->msg_style != PAM_PROMPT_ECHO_ON)
-            continue;
-
-        /* return code is currently not used but should be set to zero */
-        resp[c]->resp_retcode = 0;
-        if ((resp[c]->resp = strdup(password)) == NULL) {
-            perror("strdup");
-            return 1;
-        }
-    }
-
-    return 0;
-}
-#endif
-
 /*
  * This callback is only a dummy, see xcb_prepare_cb and xcb_check_cb.
  * See also man libev(3): "ev_prepare" and "ev_check" - customise your event loop
@@ -956,12 +956,13 @@
  *
  */
 static void raise_loop(xcb_window_t window) {
-    xcb_connection_t *conn;
     xcb_generic_event_t *event;
-    int screens;
 
+#ifdef __OpenBSD__
+    xcb_connection_t *conn;
     if (xcb_connection_has_error((conn = xcb_connect(NULL, &screens))) > 0)
         errx(EXIT_FAILURE, "Cannot open display");
+#endif
 
     /* We need to know about the window being obscured or getting destroyed. */
     xcb_change_window_attributes(conn, window, XCB_CW_EVENT_MASK,
@@ -1010,8 +1011,11 @@
     char *image_path = NULL;
     char *image_raw_format = NULL;
 #ifndef __OpenBSD__
-    int ret;
-    struct pam_conv conv = {conv_callback, NULL};
+    struct passwd *pwd;
+    struct group *grp;
+    uid_t duid;
+    gid_t dgid;
+    xcb_connection_t *raise_conn;
 #endif
     int curs_choice = CURS_NONE;
     int o;
@@ -1039,6 +1043,65 @@
     if ((username = pw->pw_name) == NULL)
         errx(EXIT_FAILURE, "pw->pw_name is NULL.");
 
+#ifndef __OpenBSD__
+    /*
+     * Shamelessly stolen from slock. See LICENSE-slock.
+     *
+     * Slock has code to make it run as nobody:nogroup, which has the added
+     *  security that the locker can only be killed by root.
+     * It causes problems with the xcb_connect in raise_loop, and the main
+     *  xcb_connect, however.
+     * Because of that, both xcb_connect are ran as root, before dropping the
+     *  privileges to the user, much like is being done with XOpenDisplay
+     *  in slock.
+     * I'm unsure of any security implications that may have, as it seems to
+     *  run fine, otherwise.
+     * Please contact me if it's something I _really_ shouldn't do.
+     */
+
+    /* If the nobody:nogroup don't exist, just use the password's user */
+    duid = pw->pw_uid;
+    if ((pwd = getpwnam("nobody")))
+        duid = pwd->pw_uid;
+    dgid = pw->pw_gid;
+    if ((grp = getgrnam("nogroup")))
+        dgid = grp->gr_gid;
+
+#ifdef __linux__
+    dontkillme();
+#endif
+
+    hash = pw->pw_passwd;
+
+    if (!strcmp(hash, "x")) {
+        struct spwd *sp;
+        if (!(sp = getspnam(pw->pw_name)))
+            errx(EXIT_FAILURE, "getspnam: cannot retrieve shadow entry. "
+                               "Make sure to suid or sgid i3lock.");
+        hash = sp->sp_pwdp;
+    }
+
+    errno = 0;
+    if (!crypt("", hash))
+        errx(EXIT_FAILURE, "crypt: %s", strerror(errno));
+
+    /* Create the necessary connections before dropping privileges */
+    if ((conn = xcb_connect(NULL, NULL)) == NULL ||
+        xcb_connection_has_error(conn))
+        errx(EXIT_FAILURE, "Could not connect to X11, maybe you need to set DISPLAY?");
+    if ((raise_conn = xcb_connect(NULL, NULL)) == NULL ||
+        xcb_connection_has_error(raise_conn))
+        errx(EXIT_FAILURE, "Cannot open display\n");
+
+    /* drop privileges */
+    if (setgroups(0, NULL) < 0)
+        errx(EXIT_FAILURE, "setgroups: %s", strerror(errno));
+    if (setgid(dgid) < 0)
+        errx(EXIT_FAILURE, "setgid: %s", strerror(errno));
+    if (setuid(duid) < 0)
+        errx(EXIT_FAILURE, "setuid: %s", strerror(errno));
+#endif
+
     char *optstring = "hvnbdc:p:ui:teI:f";
     while ((o = getopt_long(argc, argv, optstring, longopts, &longoptind)) != -1) {
         switch (o) {
@@ -1109,15 +1172,6 @@
      * the unlock indicator upon keypresses. */
     srand(time(NULL));
 
-#ifndef __OpenBSD__
-    /* Initialize PAM */
-    if ((ret = pam_start("i3lock", username, &conv, &pam_handle)) != PAM_SUCCESS)
-        errx(EXIT_FAILURE, "PAM: %s", pam_strerror(pam_handle, ret));
-
-    if ((ret = pam_set_item(pam_handle, PAM_TTY, getenv("DISPLAY"))) != PAM_SUCCESS)
-        errx(EXIT_FAILURE, "PAM: %s", pam_strerror(pam_handle, ret));
-#endif
-
 /* Using mlock() as non-super-user seems only possible in Linux.
  * Users of other operating systems should use encrypted swap/no swap
  * (or remove the ifdef and run i3lock as super-user).
@@ -1131,11 +1185,12 @@
         err(EXIT_FAILURE, "Could not lock page in memory, check RLIMIT_MEMLOCK");
 #endif
 
+#ifdef __OpenBSD__
     /* Double checking that connection is good and operatable with xcb */
-    int screennr;
-    if ((conn = xcb_connect(NULL, &screennr)) == NULL ||
+    if ((conn = xcb_connect(NULL, NULL)) == NULL ||
         xcb_connection_has_error(conn))
         errx(EXIT_FAILURE, "Could not connect to X11, maybe you need to set DISPLAY?");
+#endif
 
     if (xkb_x11_setup_xkb_extension(conn,
                                     XKB_X11_MIN_MAJOR_XKB_VERSION,
@@ -1257,10 +1312,16 @@
     if (pid == 0) {
         /* Child */
         close(xcb_get_file_descriptor(conn));
+#ifndef __OpenBSD__
+        conn = raise_conn;
+#endif
         maybe_close_sleep_lock_fd();
         raise_loop(win);
         exit(EXIT_SUCCESS);
     }
+#ifndef __OpenBSD__
+    close(xcb_get_file_descriptor(raise_conn));
+#endif
 
     /* Load the keymap again to sync the current modifier state. Since we first
      * loaded the keymap, there might have been changes, but starting from now,
diff -Naur pam/i3lock pam/i3lock
--- pam/i3lock	2018-01-10 10:36:42.000000000 +0200
+++ pam/i3lock	2020-02-02 04:42:05.869775271 +0200
@@ -1,6 +0,0 @@
-#
-# PAM configuration file for the i3lock screen locker. By default, it includes
-# the 'login' configuration file (see /etc/pam.d/login)
-#
-
-auth include login
