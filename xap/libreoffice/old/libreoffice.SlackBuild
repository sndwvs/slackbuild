#!/bin/bash

CWD=$(pwd)

NAME="libreoffice"
VERSION=6.2.5
_VERSION=6.2.5.2
BUILD=${BUILD:-1}
PACKAGER=${PACKAGER:-mara}

NUMJOBS=${NUMJOBS:-" -j$(grep -c ^processor /proc/cpuinfo 2>/dev/null) "}

SOURCE_URL="http://mirror.sjc02.svwh.net/tdf/libreoffice/src/${VERSION}"
SOURCE_URL2="https://dev-www.libreoffice.org/src"
SOURCE_URL3="https://dev-www.libreoffice.org/extern"

DOWNLOADS+=( ${SOURCE_URL}/libreoffice{,-help,-translations}-${_VERSION}.tar.xz{,.asc} )
DOWNLOADS+=( ${SOURCE_URL2}/35c94d2df8893241173de1d16b6034c0-swingExSrc.zip )
DOWNLOADS+=( ${SOURCE_URL2}/798b2ffdc8bcfe7bca2cf92b62caf685-rhino1_5R5.zip ) # keep old bundled version, new system version ftbs
DOWNLOADS+=( ${SOURCE_URL2}/a7983f859eafb2677d7ff386a023bc40-xsltml_2.1.2.zip )
DOWNLOADS+=( ${SOURCE_URL2}/0168229624cfac409e766913506961a8-ucpp-1.3.2.tar.gz )
DOWNLOADS+=( ${SOURCE_URL2}/language-subtag-registry-2018-04-23.tar.bz2 )
DOWNLOADS+=( ${SOURCE_URL2}/17410483b5b5f267aa18b7e00b65e6e0-hsqldb_1_8_0.zip )
DOWNLOADS+=( ${SOURCE_URL2}/d8bd5eed178db6e2b18eeed243f85aa8-flute-1.1.6.zip )
DOWNLOADS+=( ${SOURCE_URL2}/ba2930200c9f019c2d93a8c88c651a0f-flow-engine-0.9.4.zip )
DOWNLOADS+=( ${SOURCE_URL2}/Firebird-3.0.0.32483-0.tar.bz2 )
DOWNLOADS+=( ${SOURCE_URL2}/pdfium-3550.tar.bz2 )
DOWNLOADS+=( ${SOURCE_URL2}/lxml-4.1.1.tgz )
DOWNLOADS+=( ${SOURCE_URL3}/8249374c274932a21846fa7629c2aa9b-officeotron-0.7.4-master.jar ) # for test suite
DOWNLOADS+=( ${SOURCE_URL3}/odfvalidator-1.2.0-incubating-SNAPSHOT-jar-with-dependencies-971c54fd38a968f5860014b44301872706f9e540.jar ) # for test suite
DOWNLOADS+=( ${SOURCE_URL3}/49a64f3bcf20a7909ba2751349231d6652ded9cd2840e961b5164d09de3ffa63-opens___.ttf )
DOWNLOADS+=( ${SOURCE_URL3}/185d60944ea767075d27247c3162b3bc-unowinreg.dll )

DOWNLOADS+=( ${SOURCE_URL2}/libcmis-0.5.1.tar.gz )

# Automatically determine the architecture we're building on:
MARCH=$( uname -m )
if [ -z "$ARCH" ]; then
  case "$MARCH" in
    i?86)    export ARCH=i586 ;;
    armv7hl) export ARCH=$MARCH ;;
    arm*)    export ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *)       export ARCH=$MARCH ;;
  esac
fi

if [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O3 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
  SLKLDFLAGS=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O3 -fPIC"
  LIBDIRSUFFIX="64"
  SLKLDFLAGS="-L/usr/lib${LIBDIRSUFFIX}"
elif [ "$ARCH" = "armv7hl" ]; then
  SLKCFLAGS="-O3 -march=armv7-a -mfpu=vfpv3-d16"
  LIBDIRSUFFIX=""
  SLKLDFLAGS=""
elif [ "$ARCH" = "arm" ]; then
  SLKCFLAGS="-O3 -march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard"
  LIBDIRSUFFIX=""
  SLKLDFLAGS=""
elif [ "$ARCH" = "aarch64" ]; then
  SLKCFLAGS="-O3"
  LIBDIRSUFFIX="64"
  SLKLDFLAGS="-L/usr/lib${LIBDIRSUFFIX}"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
  SLKLDFLAGS=""
fi

case "$ARCH" in
    arm*) TARGET=$ARCH-slackware-linux-gnueabihf ;;
    *)    TARGET=$ARCH-slackware-linux ;;
esac

# download sources
[[ ! -d $CWD/sources ]] && mkdir -p $CWD/sources
for dwnlds in ${DOWNLOADS[*]}; do
    OUT=${dwnlds##*/}
    wget --no-check-certificate -c "$dwnlds" -O "sources/$OUT"
done

# Establishment tmp directory for
TMP=${TMP:-/tmp}
PKG=$TMP/package-$NAME
rm -rf $PKG
mkdir -p $PKG

# Delete a directory previous build / create new and change rights
cd $TMP
rm -rf $NAME || exit 1
mkdir $NAME || exit 1
cd $NAME || exit 1
tar xvf $CWD/sources/$NAME-${_VERSION}.tar.?z || exit 1
#tar xvf $CWD/sources/$NAME-help-${_VERSION}.tar.?z || exit 1
#tar xvf $CWD/sources/$NAME-translations-${_VERSION}.tar.?z || exit 1
cd $NAME-${_VERSION} || exit 1
chown -R root:root .
find . \
 \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
 -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
 -exec chmod 644 {} \;

# move external sources into place
mkdir $TMP/$NAME/ext_sources && pushd $TMP/$NAME/ext_sources
for _source in ${DOWNLOADS[*]}; do
    source=${_source##*/}
echo ${CWD}/sources/$source .
    ln -s ${CWD}/sources/$source .
done
popd

# unowinreg.dll must be a file not a symlink or the result will become a broken symlink
# /usr/share/libreoffice/sdk/classes/win/unowinreg.dll -> /build/libreoffice/src/185d60944ea767075d27247c3162b3bc-unowinreg.dll
rm $TMP/$NAME/ext_sources/185d60944ea767075d27247c3162b3bc-unowinreg.dll
cp -f $CWD/sources/185d60944ea767075d27247c3162b3bc-unowinreg.dll $TMP/$NAME/ext_sources

# fix not upstreamable pyuno paths - FS#54250
patch -Np1 -i ${CWD}/make-pyuno-work-with-system-wide-module-install.diff || exit 1
# fix build with boost 1.69 (freebsd)
patch -p0 -i ${CWD}/libreoffice-boost-1.69.patch || exit 1

# strip -s from Makeflags in case you use it to shorten build logs
#_MAKEFLAGS=${MAKEFLAGS/-s/}

export LDFLAGS="${SLKGPGMELDFLAGS} -Wl,-rpath,/usr/lib${LIBDIRSUFFIX}/libreoffice/program/ $SLKLDFLAGS"
# http://site.icu-project.org/download/61#TOC-Migration-Issues
export CPPFLAGS='-DU_USING_ICU_NAMESPACE=1'

# Configuration
./autogen.sh \
  --with-build-version="${VERSION}-${BUILD}" \
  --with-vendor="slarm64" \
  --enable-split-app-modules \
  --with-parallelism=${_MAKEFLAGS/-j/} \
  --with-external-tar="$TMP/$NAME/ext_sources" \
  --enable-release-build \
  --prefix=/usr \
  --exec-prefix=/usr \
  --sysconfdir=/etc \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --mandir=/usr/man \
  --docdir=/usr/doc/$NAME-$VERSION \
  --with-lang="" \
  --with-help=html \
  --disable-avahi \
  --enable-python=system \
  --disable-dconf \
  --disable-report-builder \
  --enable-dbus \
  --enable-eot \
  --enable-epm \
  --enable-ext-nlpsolver \
  --enable-ext-wiki-publisher \
  --enable-odk \
  --enable-python=internal \
  --enable-release-build \
  --enable-scripting-beanshell \
  --enable-scripting-javascript \
  --enable-symbols \
  --with-external-dict-dir=/usr/share/hunspell \
  --with-external-hyph-dir=/usr/share/hyphen \
  --with-external-thes-dir=/usr/share/mythes \
  --with-jdk-home="/usr/lib${LIBDIRSUFFIX}/java" \
  --with-ant-home="/usr/share/ant"\
  --with-system-boost \
  --with-system-cairo \
  --with-system-curl \
  --with-system-dicts \
  --with-system-expat \
  --with-system-neon \
  --with-system-nss \
  --with-system-libxml \
  --with-system-openssl \
  --with-system-zlib \
  --with-system-jpeg \
  --with-system-libpng \
  --with-x \
  --without-gssapi \
  --without-junit \
  --without-krb5 \
  --without-myspell-dicts \
  --without-system-jars \
  --without-system-lcms2 \
  --without-system-libvisio \
  --without-system-mdds \
  --without-system-poppler \
  --without-system-redland \
  --with-gdrive-client-id=${_google_default_client_id} \
  --with-gdrive-client-secret=${_google_default_client_secret} \
  --disable-dependency-tracking \
  --enable-gtk3 \
  --disable-gtk \
  --build=$TARGET \

# Compilation
touch src.downloaded
sed -i -e 's/check-if-root //g' Makefile
make build-nocheck VERBOSE=yes 2>&1 | tee -a $CWD/build.$NAME.log || exit 1
#make -C dictionaries VERBOSE=yes 2>&1 | tee -a $CWD/build.$NAME.log
#make install DESTDIR=$PKG

# Don't ship .la files:
rm -f $PKG/{,usr/}lib${LIBDIRSUFFIX}/*.la

# Strip binaries:
find $PKG | xargs file | grep -e "executable" -e "shared object" \
  | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Compress manual pages:
find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do
  ln -s $( readlink $i ).gz $i.gz
  rm $i
done

# Copy docs
mkdir -vpm755 $PKG/usr/doc/$NAME-$VERSION
cp -fav \
  LICENSE README \
  $PKG/usr/doc/$NAME-$VERSION/

# Description and installation script
mkdir -p $PKG/install
zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh
cat $CWD/slack-desc > $PKG/install/slack-desc

# Package creation
cd $PKG
makepkg -l n -c n $TMP/${NAME}-${VERSION}-${ARCH}-${BUILD}${PACKAGER}.txz
