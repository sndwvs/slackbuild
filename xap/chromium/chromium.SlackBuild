#!/bin/bash

CWD=$(pwd)

NAME="chromium"
VERSION=${VERSION:-$(echo $NAME-*.tar.?z* | cut -d - -f2 | rev | cut -d . -f3- | rev)}
BUILD=${BUILD:-1}
PACKAGER=${PACKAGER:-mara}

NUMJOBS=${NUMJOBS:-" -j$(grep -c ^processor /proc/cpuinfo 2>/dev/null) "}


# Automatically determine the architecture we're building on:
MARCH=$( uname -m )
if [ -z "$ARCH" ]; then
  case "$MARCH" in
    i?86)    export ARCH=i586 ;;
    armv7hl) export ARCH=$MARCH ;;
    arm*)    export ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
    *)       export ARCH=$MARCH ;;
  esac
fi

if [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
elif [ "$ARCH" = "armv7hl" ]; then
  SLKCFLAGS="-O2 -march=armv7-a -mfpu=vfpv3-d16"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "arm" ]; then
  SLKCFLAGS="-O2 -march=armv7-a -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "aarch64" ]; then
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

case "$ARCH" in
    arm*) TARGET=$ARCH-slackware-linux-gnueabihf ;;
    *)    TARGET=$ARCH-slackware-linux ;;
esac

# Establishment tmp directory for
TMP=${TMP:-/tmp}
PKG=$TMP/package-$NAME
rm -rf $PKG
mkdir -p $PKG

# Build or unpack build-time dependencies:
. ./build-deps.sh

# Delete a directory previous build / create new and change rights
cd $TMP
rm -rf $NAME-$VERSION
tar xvf $CWD/$NAME-$VERSION.tar.?z* || exit 1
cd $NAME-$VERSION || exit 1
chown -R root:root .
find . \
 \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
 -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
 -exec chmod 644 {} \;

# Configuration

# Possible replacements are listed in build/linux/unbundle/replace_gn_files.py
# Keys are the names in the above script; values are the dependencies in Arch
declare -gA _system_libs=(
  [ffmpeg]=ffmpeg
  [flac]=flac
  [fontconfig]=fontconfig
  [freetype]=freetype2
  [harfbuzz-ng]=harfbuzz
  [icu]=icu
  [libdrm]=
  [libjpeg]=libjpeg
  #[libpng]=libpng    # https://crbug.com/752403#c10
  [libvpx]=libvpx
  [libwebp]=libwebp
  [libxml]=libxml2
  [libxslt]=libxslt
  [opus]=opus
  [re2]=re2
  [snappy]=snappy
  [yasm]=
  [zlib]=minizip
)
_unwanted_bundled_libs=(
  $(printf "%s\n" ${!_system_libs[@]} | sed 's/^libjpeg$/&_turbo/')
)
depends+=(${_system_libs[@]})

# Google API keys (see https://www.chromium.org/developers/how-tos/api-keys)
_google_api_key=" "
_google_default_client_id=" "
_google_default_client_secret=" "

# Allow building against system libraries in official builds
sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
  tools/generate_shim_headers/generate_shim_headers.py

# Arch Linux ARM fixes
patch -p1 -i $CWD/0001-crashpad-include-limits.patch || exit 1
patch -p1 -i $CWD/chromium-81.0.4044.122-Fix-sandbox-Aw-snap-for-syscalls-403-and-407.patch ||exit 1

# Build ARMv7 with NEON
[[ $ARCH == "armv7h" ]] && NUMJOBS="-j4" && CFLAGS=`echo $CFLAGS | sed -e 's/vfpv3-d16/neon/'` && CXXFLAGS="$CFLAGS"

# Allow build to set march and options on AArch64 (crc, crypto)
[[ $ARCH == "aarch64" ]] && CFLAGS=`echo $CFLAGS | sed -e 's/-march=armv8-a//'` && CXXFLAGS="$CFLAGS"

# https://crbug.com/893950
sed -i -e 's/\/malloc/' -e 's/\/free/' \
  third_party/blink/renderer/core/xml/*.cc \
  third_party/blink/renderer/core/xml/parser/xml_document_parser.cc \
  third_party/libxml/chromium/*.cc

# https://chromium-review.googlesource.com/c/chromium/src/+/2145261
patch -Np1 -i $CWD/clean-up-a-call-to-set_utf8.patch || exit 1

# https://chromium-review.googlesource.com/c/chromium/src/+/2153111
patch -Np1 -F3 -i $CWD/iwyu-std-numeric_limits-is-defined-in-limits.patch || exit 1

# https://chromium-review.googlesource.com/c/chromium/src/+/2152333
patch -Np1 -i $CWD/add-missing-algorithm-header-in-crx_install_error.cc.patch || exit 1

# https://chromium-review.googlesource.com/c/chromium/src/+/2132403
patch -Np1 -i $CWD/libstdc-fix-incomplete-type-in-AXTree-for-NodeSetSiz.patch || exit 1

# https://chromium-review.googlesource.com/c/chromium/src/+/2164645
patch -Np1 -i $CWD/include-memory-header-to-get-the-definition-of-std-u.patch || exit 1

# https://chromium-review.googlesource.com/c/chromium/src/+/2174199
patch -Np1 -i $CWD/make-some-of-blink-custom-iterators-STL-compatible.patch || exit 1

# https://chromium-review.googlesource.com/c/chromium/src/+/2094496
patch -Np1 -i $CWD/avoid-double-destruction-of-ServiceWorkerObjectHost.patch || exit 1

# https://crbug.com/v8/10393
patch -Np1 -d v8 < $CWD/v8-remove-soon-to-be-removed-getAllFieldPositions.patch || exit 1

# Fixes from Gentoo
patch -Np1 -i $CWD/chromium-83-gcc-10.patch || exit 1

# https://crbug.com/skia/6663#c10
patch -Np0 -i $CWD/chromium-skia-harmony.patch || exit 1

# Force script incompatible with Python 3 to use /usr/bin/python2
sed -i '1s|python$|&2|' third_party/dom_distiller_js/protoc_plugins/*.py

mkdir -p third_party/node/linux/node-linux-x64/bin
#ln -s /usr/bin/node third_party/node/linux/node-linux-x64/bin/
ln -s $TMP/chromium-build-deps/usr/bin/node third_party/node/linux/node-linux-x64/bin/

# Remove bundled libraries for which we will use the system copies; this
# *should* do what the remove_bundled_libraries.py script does, with the
# added benefit of not having to list all the remaining libraries
for _lib in ${_unwanted_bundled_libs[@]}; do
  find "third_party/$_lib" -type f \
    \! -path "third_party/$_lib/chromium/*" \
    \! -path "third_party/$_lib/google/*" \
    \! -path "third_party/harfbuzz-ng/utils/hb_scoped.h" \
    \! -path 'third_party/yasm/run_yasm.py' \
    \! -regex '.*\.\(gn\|gni\|isolate\)' \
    -delete
done

python2 build/linux/unbundle/replace_gn_files.py \
  --system-libraries "${!_system_libs[@]}"

# Compilation
export CC=clang
export CXX=clang++
export AR=ar
export NM=nm

_flags=(
  'custom_toolchain="//build/toolchain/linux/unbundle:default"'
  'host_toolchain="//build/toolchain/linux/unbundle:default"'
  'clang_use_chrome_plugins=false'
  'clang_use_default_sample_profile=false'
  'use_allocator="none"'
  'is_official_build=true' # implies is_cfi=true on x86_64
  'is_cfi=false'
  'treat_warnings_as_errors=false'
  'fieldtrial_testing_like_official_build=true'
  'ffmpeg_branding="Chrome"'
  'proprietary_codecs=true'
  'rtc_use_pipewire=true'
  'link_pulseaudio=true'
  'use_gnome_keyring=false'
  'use_gold=false'
  'use_sysroot=false'
  'linux_use_bundled_binutils=false'
  'use_custom_libcxx=false'
  'enable_hangout_services_extension=true'
  'enable_widevine=true'
  'enable_nacl=false'
  'enable_swiftshader=false'
  "linux_sandbox_path=\"/usr/lib${LIBDIRSUFFIX}/${NAME}/chrome_sandbox\""
  "google_api_key=\"${_google_api_key}\""
  "google_default_client_id=\"${_google_default_client_id}\""
  "google_default_client_secret=\"${_google_default_client_secret}\""
)

if [[ -n ${_system_libs[icu]+set} ]]; then
  _flags+=('icu_use_data_file=false')
fi

if check_option strip y; then
  _flags+=('symbol_level=0')
fi

CFLAGS+="$SLKCFLAGS"
CXXFLAGS+="$SLKCFLAGS"

# Facilitate deterministic builds (taken from build/config/compiler/BUILD.gn)
CFLAGS+='   -Wno-builtin-macro-redefined'
CXXFLAGS+=' -Wno-builtin-macro-redefined'
CPPFLAGS+=' -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__='

# Do not warn about unknown warning options
CFLAGS+='   -Wno-unknown-warning-option'
CXXFLAGS+=' -Wno-unknown-warning-option'

gn gen out/Release --args="${_flags[*]}" --script-executable=/usr/bin/python2
ninja -C out/Release chrome chrome_sandbox chromedriver
  
install -D out/Release/chrome "$PKG/usr/lib${LIBDIRSUFFIX}/chromium/chromium"
install -Dm4755 out/Release/chrome_sandbox "$PKG/usr/lib${LIBDIRSUFFIX}/chromium/chrome-sandbox"
ln -s /usr/lib${LIBDIRSUFFIX}/chromium/chromedriver "$PKG/usr/bin/chromedriver"

install -Dm644 chrome/installer/linux/common/desktop.template \
  "$PKG/usr/share/applications/chromium.desktop"
install -Dm644 chrome/app/resources/manpage.1.in \
  "$PKG/usr/man/man1/chromium.1"
sed -i \
  -e "s/@@MENUNAME@@/Chromium/g" \
  -e "s/@@PACKAGE@@/chromium/g" \
  -e "s/@@USR_BIN_SYMLINK_NAME@@/chromium/g" \
  "$PKG/usr/share/applications/chromium.desktop" \
  "$PKG/usr/man/man1/chromium.1"

cp \
  out/Release/{chrome_{100,200}_percent,resources}.pak \
  out/Release/{*.bin,chromedriver} \
  "$PKG/usr/lib${LIBDIRSUFFIX}/chromium/"
install -Dm644 -t "$PKG/usr/lib${LIBDIRSUFFIX}/chromium/locales" out/Release/locales/*.pak

if [[ -z ${_system_libs[icu]+set} ]]; then
  cp out/Release/icudtl.dat "$PKG/usr/lib${LIBDIRSUFFIX}/chromium/"
fi

for size in 24 48 64 128 256; do
  install -Dm644 "chrome/app/theme/chromium/product_logo_$size.png" \
    "$PKG/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
done

for size in 16 32; do
  install -Dm644 "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \
    "$PKG/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
done

# Don't ship .la files:
rm -f $PKG/{,usr/}lib${LIBDIRSUFFIX}/*.la

# Strip binaries:
find $PKG | xargs file | grep -e "executable" -e "shared object" \
  | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Compress manual pages:
find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do
  ln -s $( readlink $i ).gz $i.gz
  rm $i
done

# Copy docs
mkdir -vpm755 $PKG/usr/doc/$NAME-$VERSION
cp -fav \
  LICENSE README \
  $PKG/usr/doc/$NAME-$VERSION/
cat $CWD/$NAME.SlackBuild > $PKG/usr/doc/$NAME-$VERSION/$NAME.SlackBuild

# Description and installation script
mkdir -p $PKG/install
zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh
cat $CWD/slack-desc > $PKG/install/slack-desc

# Package creation
cd $PKG
makepkg -l n -c n $TMP/${NAME}-${VERSION}-${ARCH}-${BUILD}${PACKAGER}.txz
